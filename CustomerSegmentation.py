# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WOC44F-cE1j7AKblchI50bjspn_lRBDd
"""

# Task 3: Customer Segmentation

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.decomposition import PCA
from sklearn.metrics import silhouette_score

# ---------------------------
# 1. Load dataset
# ---------------------------
df = pd.read_csv("/content/Customers.csv")   # Replace with your file path

print("Data Sample:")
print(df.head())

# ---------------------------
# 2. Preprocessing
# ---------------------------

# Drop CustomerID (not useful for clustering)
if 'CustomerID' in df.columns:
    df = df.drop(columns=['CustomerID'])

# Encode categorical variables (like Gender, Profession)
categorical_cols = df.select_dtypes(include=['object']).columns
for col in categorical_cols:
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col])

# Scale the data
scaler = StandardScaler()
scaled_data = scaler.fit_transform(df)

# ---------------------------
# 3. Optimal number of clusters
# ---------------------------
inertia = []
silhouette_scores = []
K = range(2, 11)

for k in K:
    kmeans = KMeans(n_clusters=k, random_state=42, n_init=10)
    kmeans.fit(scaled_data)
    inertia.append(kmeans.inertia_)
    silhouette_scores.append(silhouette_score(scaled_data, kmeans.labels_))

# Plot Elbow Method
plt.figure(figsize=(10,5))
plt.plot(K, inertia, marker='o')
plt.xlabel("Number of Clusters (k)")
plt.ylabel("Inertia")
plt.title("Elbow Method")
plt.show()

# Plot Silhouette Score
plt.figure(figsize=(10,5))
plt.plot(K, silhouette_scores, marker='o')
plt.xlabel("Number of Clusters (k)")
plt.ylabel("Silhouette Score")
plt.title("Silhouette Analysis")
plt.show()

# ---------------------------
# 4. Fit KMeans with chosen k
# ---------------------------
optimal_k = 4   # <- Choose based on elbow/silhouette results
kmeans = KMeans(n_clusters=optimal_k, random_state=42, n_init=10)
df["Cluster"] = kmeans.fit_predict(scaled_data)

# ---------------------------
# 5. Analyze clusters
# ---------------------------
print("\nCluster Summary:")
print(df.groupby("Cluster").mean())

# ---------------------------
# 6. Visualization using PCA
# ---------------------------
pca = PCA(2)
pca_data = pca.fit_transform(scaled_data)
df["PCA1"] = pca_data[:,0]
df["PCA2"] = pca_data[:,1]

plt.figure(figsize=(8,6))
for cluster in df["Cluster"].unique():
    subset = df[df["Cluster"] == cluster]
    plt.scatter(subset["PCA1"], subset["PCA2"], label=f"Cluster {cluster}", alpha=0.7)

plt.xlabel("PCA 1")
plt.ylabel("PCA 2")
plt.title("Customer Segmentation")
plt.legend()
plt.show()